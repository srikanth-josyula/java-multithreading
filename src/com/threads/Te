package org.sample.csvwriter;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;

import org.sample.constants.CommonConstants;

import com.csvreader.CsvWriter;

public class MultiThreadCSVWriter {
	
	public static void main(String[] args) {
		createCSVReport();
	}

	private static final char SEPERATOR = ',';

	public static void createCSVReport() {
		

		try {
			File file = new File(CommonConstants.csv_location + "/" + "test.csv");

			file.getParentFile().mkdirs();
			final CsvWriter csvWriter = new CsvWriter(new FileWriter(file, true), SEPERATOR);

			String[] header = { "test" };

			csvWriter.writeRecord(header);

			ExecutorService executor = Executors.newFixedThreadPool(10);
			IntStream.iterate(0, i -> i < 100, i -> i + 1).forEach(i -> {
				executor.submit(() -> {
					String[] data = {Integer.toString(i)};
					try {
						csvWriter.writeRecord(data);
					} catch (IOException e) {
						e.printStackTrace();
					}
				});
			});

			executor.shutdown();

			if (!executor.awaitTermination(1, TimeUnit.HOURS)) {
				System.out.println("Timeout exceeded before completing all tasks.");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void generateCSV(CsvWriter csvWriter) {
		try {

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
