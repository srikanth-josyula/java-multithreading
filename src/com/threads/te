package org.sample.nodes;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.IntStream;

public class GetNodeProperties {

    private final static int SKIP_COUNT = Integer.parseInt("2");  // Use Integer.parseInt for converting string to int

    public static void main(String[] args) {
        int pageNum = 0;       // Start page number
        int maxLimit = 5;      // Max limit to process

        // Create an ExecutorService with 2 threads (adjust the number of threads based on your requirements)
        ExecutorService executor = Executors.newFixedThreadPool(3);

        // Use Stream.iterate to submit tasks for each range to the executor
        IntStream.iterate(pageNum, i -> i < maxLimit, i -> i + SKIP_COUNT)
                .forEach(i -> {
                    // Submit a task to the executor for each "chunk" of the iteration
                    executor.submit(() -> {
                        System.out.println(Thread.currentThread().getName() + " processing range starting from " + i);
                        // Process the range within this chunk (i.e., from i to min(i + SKIP_COUNT, maxLimit))
                        for (int j = i; j < Math.min(i + SKIP_COUNT, maxLimit); j++) {
                            System.out.println(Thread.currentThread().getName() + " - " + j);
                        }
                    });
                });

        // Shutdown the executor after all tasks are submitted
        executor.shutdown();
    }
}
